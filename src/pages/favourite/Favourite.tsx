// "use client";

// import axios from "axios";
// import { useEffect, useState, useCallback } from "react";
// import {
//   display_facourite,
//   display_facourite_home,
//   Home_Type_importance_id,
//   Home_user_Type_importance,
//   user_Type,
//   user_Type_importance,
// } from "../../allapi/api";
// import Card from "../../components/cards/Card";
// import Skeleton from "react-loading-skeleton";
// import "react-loading-skeleton/dist/skeleton.css";
// import img1 from "../../assets/images/guruji1.jpg";
// import img2 from "../../assets/images/guruji2.png";
// import img3 from "../../assets/images/guruji3.jpg";
// import img4 from "../../assets/images/guruji4.png";

// interface CardItem {
//   _id: string;
//   name: string;
//   link: string;
//   img: string;
// }

// interface Item {
//   Contents: {
//     [key: string]: string;
//   };
//   Links: string;
//   img: string;
// }

// const items: Item[] = [
//   {
//     Contents: {
//       en: "Our Founder",
//       hi: "рд╣рдорд╛рд░рд╛ рд╕рдВрд╕реНрдерд╛рдкрдХ",
//       kn: "р▓ир▓ор│Нр▓о р▓╕р▓Вр▓╕р│Нр▓ер▓╛р▓кр▓Х",
//       ta: "роОроЩрпНроХро│рпН роиро┐ро▒рпБро╡ройро░рпН",
//       te: "р░ор░и р░╕р▒Нр░ер░╛р░кр░Хр▒Бр░бр▒Б",
//       gu: "ркЕркорк╛рк░рк╛ рк╕рлНркерк╛рккркХ",
//       mr: "рдЖрдкрд▓реЗ рд╕рдВрд╕реНрдерд╛рдкрдХ",
//       ml: "р┤ир┤ор╡Нр┤ор╡Бр┤Яр╡Ж р┤╕р╡Нр┤ер┤╛р┤кр┤Хр╡╗",
//       pa: "ри╕ри╛рибри╛ ри╕рй░ри╕риери╛рикриХ",
//       bn: "ржЖржорж╛ржжрзЗрж░ ржкрзНрж░рждрж┐рж╖рзНржарж╛рждрж╛",
//       ru: "╨Э╨░╤И ╨╛╤Б╨╜╨╛╨▓╨░╤В╨╡╨╗╤М",
//       es: "Nuestro Fundador",
//       zh: "цИСф╗мчЪДхИЫхзЛф║║",
//       mn: "╨С╨╕╨┤╨╜╨╕╨╣ ╥п╨╜╨┤╤Н╤Б╨╗╤Н╨│╤З",
//       pl: "Nasz Za┼Вo┼╝yciel",
//       bg: "╨Э╨░╤И╨╕╤П╤В ╨╛╤Б╨╜╨╛╨▓╨░╤В╨╡╨╗",
//       fr: "Notre Fondateur",
//       de: "Unser Gr├╝nder",
//       nl: "Onze Oprichter",
//       it: "Il nostro Fondatore",
//       pt: "Nosso Fundador",
//       ja: "чзБуБЯуБбуБохЙ╡шиншАЕ",
//       vi: "Ng╞░с╗Эi s├бng lс║нp cс╗зa ch├║ng t├┤i",
//     },
//     Links: "https://gurudev.artofliving.org/",
//     img: img1,
//   },
//   {
//     Contents: {
//       en: "Bengaluru International Center",
//       hi: "рдмреИрдВрдЧрд▓реЛрд░ рдЕрдВрддрд░реНрд░рд╛рд╖реНрдЯреНрд░реАрдп рдХреЗрдВрджреНрд░",
//       kn: "р▓мр│Жр▓Вр▓Чр▓│р│Вр▓░р│Б р▓Ер▓Вр▓др▓╛р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р│Ар▓п р▓Хр│Зр▓Вр▓жр│Нр▓░",
//       ta: "рокрпЖроЩрпНроХро│рпВро░рпБ рокройрпНройро╛роЯрпНроЯрпБ роорпИропроорпН",
//       te: "р░мр▒Жр░Вр░Чр░│р▒Вр░░р▒Б р░Ер░Вр░др░░р▒Нр░Ьр░╛р░др▒Ар░п р░Хр▒Зр░Вр░жр▒Нр░░р░В",
//       gu: "ркмрлЗркВркЧрк▓рлБрк░рлБ ркЖркВркдрк░рк░рк╛рк╖рлНркЯрлНрк░рлАркп ркХрлЗркирлНркжрлНрк░",
//       mr: "рдмреЗрдВрдЧрд│реБрд░реВ рдЖрдВрддрд░рд░рд╛рд╖реНрдЯреНрд░реАрдп рдХреЗрдВрджреНрд░",
//       ml: "р┤мр┤Вр┤Чр┤│р╡Вр┤░р╡Б р┤Ер┤ир╡Нр┤др┤╛р┤░р┤╛р┤╖р╡Нр┤Яр╡Нр┤░ р┤Хр╡Зр┤ир╡Нр┤жр╡Нр┤░р┤В",
//       pa: "римрйИриВриЧри▓рйБри░рйВ риЕрй░ридри░ри░ри╛ри╕ри╝риЯри░рйА риХрйЗриВрижри░",
//       bn: "ржмрзЗржЩрзНржЧрж╛рж▓рзБрж░рзБ ржЖржирзНрждрж░рзНржЬрж╛рждрж┐ржХ ржХрзЗржирзНржжрзНрж░",
//       ru: "╨С╨░╨╜╨│╨░╨╗╨╛╤А╤Б╨║╨╕╨╣ ╨╝╨╡╨╢╨┤╤Г╨╜╨░╤А╨╛╨┤╨╜╤Л╨╣ ╤Ж╨╡╨╜╤В╤А",
//       es: "Centro Internacional de Bangalore",
//       zh: "чПнхКач╜Чх░ФхЫ╜щЩЕф╕нх┐Г",
//       mn: "╨С╨░╨╜╨│╨░╨╗╨╛╤А╤Л╨╜ ╨Ю╨╗╨╛╨╜ ╤Г╨╗╤Б╤Л╨╜ ╤В╙й╨▓",
//       pl: "Mi─Щdzynarodowe Centrum w Bangalore",
//       bg: "╨Ь╨╡╨╢╨┤╤Г╨╜╨░╤А╨╛╨┤╨╡╨╜ ╤Ж╨╡╨╜╤В╤К╤А ╨▓ ╨С╨░╨╜╨│╨░╨╗╨╛╤А",
//       fr: "Centre International de Bangalore",
//       de: "Internationales Zentrum Bangalore",
//       nl: "Internationaal Centrum Bangalore",
//       it: "Centro Internazionale di Bangalore",
//       pt: "Centro Internacional de Bangalore",
//       ja: "уГРуГ│уВмуГнуГ╝уГлхЫ╜щЪЫуВ╗уГ│уВ┐уГ╝",
//       vi: "Trung t├вm Quс╗Сc tс║┐ Bangalore",
//     },
//     Links: "https://bangaloreashram.org/",
//     img: img2,
//   },
//   {
//     Contents: {
//       en: "Register for Programs",
//       hi: "рдХрд╛рд░реНрдпрдХреНрд░рдореЛрдВ рдХреЗ рд▓рд┐рдП рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ",
//       kn: "р▓Хр▓╛р▓░р│Нр▓пр▓Хр│Нр▓░р▓ор▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓ир│Лр▓Вр▓жр▓╛р▓пр▓┐р▓╕р▓┐",
//       ta: "рокрогро┐роХро│рпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН",
//       te: "р░кр▒Нр░░р▒Лр░Чр▒Нр░░р░╛р░ор▒НтАМр░▓ р░Хр▒Лр░╕р░В р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░╕р▒Бр░Хр▒Лр░Вр░бр░┐",
//       gu: "ркХрк╛рк░рлНркпркХрлНрк░ркорлЛ ркорк╛ркЯрлЗ ркирлЛркВркзркгрлА ркХрк░рлЛ",
//       mr: "рдХрд╛рд░реНрдпрдХреНрд░рдорд╛рдВрд╕рд╛рдареА рдиреЛрдВрджрдгреА рдХрд░рд╛",
//       ml: "р┤кр╡Нр┤░р╡Лр┤Чр╡Нр┤░р┤╛р┤ор╡Бр┤Хр╡╛р┤Хр╡Нр┤Хр╡Н р┤░р┤Ьр┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р╡╝ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
//       pa: "риХри╛ри░риЬриХрйНри░риори╛риВ ри▓риИ ри░риЬри┐ри╕риЯри░ риХри░рйЛ",
//       bn: "ржЕржирзБрж╖рзНржарж╛ржиржЧрзБрж▓рж┐рж░ ржЬржирзНржп ржирж┐ржмржирзНржзржи ржХрж░рзБржи",
//       ru: "╨Ч╨░╤А╨╡╨│╨╕╤Б╤В╤А╨╕╤А╤Г╨╣╤В╨╡╤Б╤М ╨╜╨░ ╨┐╤А╨╛╨│╤А╨░╨╝╨╝╤Л",
//       es: "Reg├нstrate para programas",
//       zh: "ц│ихЖМщб╣чЫо",
//       mn: "╨е╙й╤В╙й╨╗╨▒╙й╤А╥п╥п╨┤╤Н╨┤ ╨▒╥п╤А╤В╨│╥п╥п╨╗╨╜╤Н ╥п╥п",
//       pl: "Zarejestruj si─Щ na programy",
//       bg: "╨а╨╡╨│╨╕╤Б╤В╤А╨╕╤А╨░╨╣╤В╨╡ ╤Б╨╡ ╨╖╨░ ╨┐╤А╨╛╨│╤А╨░╨╝╨╕",
//       fr: "Inscrivez-vous aux programmes",
//       de: "F├╝r Programme registrieren",
//       nl: "Registreer voor programma's",
//       it: "Registrati ai programmi",
//       pt: "Registre-se para programas",
//       ja: "уГЧуГнуВ░уГйуГауБлчЩ╗щМ▓уБЩуВЛ",
//       vi: "─Р─Гng k├╜ cho c├бc ch╞░╞бng tr├мnh",
//     },
//     Links: "https://programs.vvmvp.org/",
//     img: img3,
//   },
//   {
//     Contents: {
//       en: "Visitor Services",
//       hi: "рдЖрдЧрдВрддреБрдХ рд╕реЗрд╡рд╛рдПрдВ",
//       kn: "р▓╕р▓Вр▓жр▓░р│Нр▓╢р▓Хр▓░ р▓╕р│Зр▓╡р│Жр▓Чр▓│р│Б",
//       ta: "рокро╛ро░рпНро╡рпИропро╛ро│ро░рпН роЪрпЗро╡рпИроХро│рпН",
//       te: "р░╕р░Вр░жр░░р▒Нр░╢р░Х р░╕р▒Зр░╡р░▓р▒Б",
//       gu: "ркорлБрк▓рк╛ркХрк╛ркд рк╕рлЗрк╡рк╛ркУ",
//       mr: "рдкрд░реНрдпрдЯрдХ рд╕реЗрд╡рд╛рдПрдВ",
//       ml: "р┤╕р┤ир╡Нр┤жр╡╝р┤╢р┤Х р┤╕р╡Зр┤╡р┤ир┤Щр╡Нр┤Щр╡╛",
//       pa: "рижри░ри╕ри╝риХ ри╕рйЗри╡ри╛ри╡ри╛риВ",
//       bn: "ржжрж░рзНрж╢ржирж╛рж░рзНржерзА ржкрж░рж┐рж╖рзЗржмрж╛рж╕ржорзВрж╣",
//       ru: "╨б╨╡╤А╨▓╨╕╤Б╤Л ╨┤╨╗╤П ╨┐╨╛╤Б╨╡╤В╨╕╤В╨╡╨╗╨╡╨╣",
//       es: "Servicios para Visitantes",
//       zh: "шо┐ховцЬНхКб",
//       mn: "╨Ч╨╛╤З╨┤╨╛╨┤ ╨╖╨╛╤А╨╕╤Г╨╗╤Б╨░╨╜ ╥п╨╣╨╗╤З╨╕╨╗╨│╤Н╤Н",
//       pl: "Us┼Вugi dla go┼Ыci",
//       bg: "╨г╤Б╨╗╤Г╨│╨╕ ╨╖╨░ ╨┐╨╛╤Б╨╡╤В╨╕╤В╨╡╨╗╨╕",
//       fr: "Services aux visiteurs",
//       de: "Besucherservices",
//       nl: "Bezoekersdiensten",
//       it: "Servizi per i visitatori",
//       pt: "Servi├зos para visitantes",
//       ja: "шикхХПшАЕуВ╡уГ╝уГУуВ╣",
//       vi: "C├бc dс╗Лch vс╗е kh├бch tham quan",
//     },
//     Links: "http://aolic.org/kiosk",
//     img: img4,
//   },
// ];

// function Favourite() {
//   const userId = localStorage.getItem("userId");
//   const [internalItems, setInternalItems] = useState<CardItem[]>([]);
//   const [homeItems, setHomeItems] = useState<CardItem[]>([]);
//   const [loadingInternal, setLoadingInternal] = useState(true);
//   const [loadingHome, setLoadingHome] = useState(true);
//   const [favoriteIds, setFavoriteIds] = useState<string[]>([]);

//   // Unified favorite toggle function for internal items
//   const handleToggleInternalFavorite = useCallback(
//     async (cardId: string) => {
//       if (!userId) return;

//       try {
//         await axios.post(`${user_Type_importance}/${userId}`, { cardId });
//         setFavoriteIds((prev) => {
//           const isFavorite = prev.includes(cardId);
//           return isFavorite
//             ? prev.filter((itemId) => itemId !== cardId)
//             : [...prev, cardId];
//         });
//       } catch (error) {
//         console.error("Error toggling internal favorite:", error);
//       }
//     },
//     [userId]
//   );

//   // Unified favorite toggle function for home items
//   const handleToggleHomeFavorite = useCallback(
//     async (cardId: string) => {
//       if (!userId) return;

//       try {
//         await axios.post(`${Home_user_Type_importance}/${userId}`, { cardId });
//         setFavoriteIds((prev) => {
//           const isFavorite = prev.includes(cardId);
//           return isFavorite
//             ? prev.filter((itemId) => itemId !== cardId)
//             : [...prev, cardId];
//         });
//       } catch (error) {
//         console.error("Error toggling home favorite:", error);
//       }
//     },
//     [userId]
//   );

//   // Fetch favorite IDs
//   useEffect(() => {
//     const fetchFavoriteIds = async () => {
//       if (!userId) return;

//       try {
//         const [homeResponse, userResponse] = await Promise.all([
//           axios.get(`${Home_Type_importance_id}/${userId}`),
//           axios.get(`${user_Type}/${userId}`),
//         ]);

//         const combinedIds = [
//           ...(homeResponse.data?.CardTypes || []),
//           ...(userResponse.data?.userTypes || []),
//         ];

//         const uniqueIds = [...new Set(combinedIds)];
//         setFavoriteIds(uniqueIds);
//       } catch (error) {
//         console.error("Error fetching favorite IDs:", error);
//         setFavoriteIds([]);
//       }
//     };

//     fetchFavoriteIds();
//   }, [userId]);

//   // Fetch internal favorites
//   useEffect(() => {
//     const fetchInternalFavorites = async () => {
//       if (!userId) return;

//       try {
//         const response = await axios.get(`${display_facourite}/${userId}`);
//         console.log("ЁЯЪА ~ fetchInternalFavorites ~ response:", response.data);
//         const data = response.data.userTypes || [];
//         setInternalItems(data);
//       } catch (error) {
//         console.error("Error fetching internal favorites:", error);
//         setInternalItems([]);
//       } finally {
//         setLoadingInternal(false);
//       }
//     };

//     fetchInternalFavorites();
//   }, [userId]);

//   // Fetch home favorites
//   useEffect(() => {
//     const fetchHomeFavorites = async () => {
//       if (!userId) return;

//       try {
//         const response = await axios.get(`${display_facourite_home}/${userId}`);
//         const data = response.data.userTypes || [];
//         setHomeItems(data);
//       } catch (error) {
//         console.error("Error fetching home favorites:", error);
//         setHomeItems([]);
//       } finally {
//         setLoadingHome(false);
//       }
//     };

//     fetchHomeFavorites();
//   }, [userId]);

//   const renderSkeletonCards = (keyPrefix: string) => (
//     <div className="w-full text-center sm:my-4 px-4 mt-4 mb-6">
//       <Skeleton
//         height={30}
//         width={260}
//         className="mx-auto mb-6"
//         style={{ borderRadius: "8px" }}
//       />
//       <div className="flex gap-6 flex-wrap justify-center sm:pb-12">
//         {[1, 2, 3, 4].map((_, index) => (
//           <div
//             key={`${keyPrefix}-skeleton-${index}`}
//             className="flex flex-col items-center justify-center p-4 bg-white/50 rounded-2xl w-[140px] h-[140px] sm:w-[200px] sm:h-[200px]"
//           >
//             <div className="mb-3">
//               <Skeleton height="5rem" width="5rem" circle />
//             </div>
//             <div className="w-[70%]">
//               <Skeleton height="1rem" />
//             </div>
//           </div>
//         ))}
//       </div>
//     </div>
//   );

//   const renderFavoriteSection = (
//     title: string,
//     items: CardItem[],
//     loading: boolean,
//     onToggle: (cardId: string) => void,
//     keyPrefix: string
//   ) => (
//     <div className="favorites-section">
//       {loading ? (
//         renderSkeletonCards(keyPrefix)
//       ) : (
//         <div className="text-center px-4">
//           <h2 className="text-2xl sm:text-3xl font-bold font-cinzel mb-2">
//             {title}
//           </h2>
//           {items.length > 0 ? (
//             <div className="flex flex-wrap justify-center gap-3 py-12">
//               {items.map((item) => (
//                 <Card
//                   key={`${keyPrefix}-${item._id}`}
//                   id={item._id}
//                   link={item.link || "#"}
//                   name={item.name}
//                   img={item.img}
//                   isFavorite={favoriteIds.includes(item._id)}
//                   onFavoriteToggle={onToggle}
//                 />
//               ))}
//             </div>
//           ) : (
//             <p className="py-12">No {title.toLowerCase()} found</p>
//           )}
//         </div>
//       )}
//     </div>
//   );

//   return (
//     <div className="favorites-container">
//       {renderFavoriteSection(
//         "Internal Favorites",
//         internalItems,
//         loadingInternal,
//         handleToggleInternalFavorite,
//         "internal"
//       )}
//       {renderFavoriteSection(
//         "Home Favorites",
//         homeItems,
//         loadingHome,
//         handleToggleHomeFavorite,
//         "home"
//       )}
//     </div>
//   );
// }

// export default Favourite;

"use client";

import axios from "axios";
import { useEffect, useState, useCallback } from "react";
import {
  display_facourite,
  display_facourite_home,
  Home_Type_importance_id,
  Home_user_Type_importance,
  user_Type,
  user_Type_importance,
} from "../../allapi/api";
import Card from "../../components/cards/Card";
import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";
import img1 from "../../assets/images/guruji1.jpg"; // Image to display when no cards are available
import StaticFavourite from "./StaticFavourite";

interface CardItem {
  _id: string;
  name: string;
  link: string;
  img: string;
}

const Favourite: React.FC = () => {
  const userId = localStorage.getItem("userId");
  const [internalItems, setInternalItems] = useState<CardItem[]>([]);
  const [homeItems, setHomeItems] = useState<CardItem[]>([]);
  const [loadingInternal, setLoadingInternal] = useState(true);
  const [loadingHome, setLoadingHome] = useState(true);
  const [favoriteIds, setFavoriteIds] = useState<string[]>([]);

  // Toggle favorite for internal items
  const handleToggleInternalFavorite = useCallback(
    async (cardId: string) => {
      if (!userId) return;

      try {
        await axios.post(`${user_Type_importance}/${userId}`, { cardId });
        setFavoriteIds((prev) =>
          prev.includes(cardId)
            ? prev.filter((itemId) => itemId !== cardId)
            : [...prev, cardId]
        );
      } catch (error) {
        console.error("Error toggling internal favorite:", error);
      }
    },
    [userId]
  );

  // Toggle favorite for home items
  const handleToggleHomeFavorite = useCallback(
    async (cardId: string) => {
      if (!userId) return;

      try {
        await axios.post(`${Home_user_Type_importance}/${userId}`, { cardId });
        setFavoriteIds((prev) =>
          prev.includes(cardId)
            ? prev.filter((itemId) => itemId !== cardId)
            : [...prev, cardId]
        );
      } catch (error) {
        console.error("Error toggling home favorite:", error);
      }
    },
    [userId]
  );

  // Fetch favorite IDs
  useEffect(() => {
    const fetchFavoriteIds = async () => {
      if (!userId) {
        setFavoriteIds([]);
        return;
      }

      try {
        const [homeResponse, userResponse] = await Promise.all([
          axios.get(`${Home_Type_importance_id}/${userId}`),
          axios.get(`${user_Type}/${userId}`),
        ]);

        const combinedIds = [
          ...(homeResponse.data?.CardTypes || []),
          ...(userResponse.data?.userTypes || []),
        ];
        setFavoriteIds([...new Set(combinedIds)]);
      } catch (error) {
        console.error("Error fetching favorite IDs:", error);
        setFavoriteIds([]);
      }
    };

    fetchFavoriteIds();
  }, [userId]);

  // Fetch internal favorites
  useEffect(() => {
    const fetchInternalFavorites = async () => {
      if (!userId) {
        setInternalItems([]);
        setLoadingInternal(false);
        return;
      }

      try {
        const response = await axios.get(`${display_facourite}/${userId}`);
        setInternalItems(response.data.userTypes || []);
      } catch (error) {
        console.error("Error fetching internal favorites:", error);
        setInternalItems([]);
      } finally {
        setLoadingInternal(false);
      }
    };

    fetchInternalFavorites();
  }, [userId]);

  // Fetch home favorites
  useEffect(() => {
    const fetchHomeFavorites = async () => {
      if (!userId) {
        setHomeItems([]);
        setLoadingHome(false);
        return;
      }

      try {
        const response = await axios.get(`${display_facourite_home}/${userId}`);
        setHomeItems(response.data.userTypes || []);
      } catch (error) {
        console.error("Error fetching home favorites:", error);
        setHomeItems([]);
      } finally {
        setLoadingHome(false);
      }
    };

    fetchHomeFavorites();
  }, [userId]);

  // Render skeleton cards during loading
  const renderSkeletonCards = (keyPrefix: string) => (
    <div className="w-full text-center sm:my-4 px-4 mt-4 mb-6">
      <Skeleton
        height={30}
        width={260}
        className="mx-auto mb-6"
        style={{ borderRadius: "8px" }}
      />
      <div className="flex gap-6 flex-wrap justify-center sm:pb-12">
        {[1, 2, 3, 4].map((_, index) => (
          <div
            key={`${keyPrefix}-skeleton-${index}`}
            className="flex flex-col items-center justify-center p-4 bg-white/50 rounded-2xl w-[140px] h-[140px] sm:w-[200px] sm:h-[200px]"
          >
            <div className="mb-3">
              <Skeleton height="5rem" width="5rem" circle />
            </div>
            <div className="w-[70%]">
              <Skeleton height="1rem" />
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Render favorite section with cards
  const renderFavoriteSection = (
    title: string,
    items: CardItem[],
    loading: boolean,
    onToggle: (cardId: string) => void,
    keyPrefix: string
  ) => {
    if (loading) return renderSkeletonCards(keyPrefix);
    if (items.length === 0) return null; // Hide section if no items

    return (
      <div className="text-center px-4">
        <h2 className="text-2xl sm:text-3xl font-bold font-cinzel mb-2">
          {title}
        </h2>
        <div className="flex flex-wrap justify-center gap-3 py-12">
          {items.map((item) => (
            <Card
              key={`${keyPrefix}-${item._id}`}
              id={item._id}
              link={item.link || "#"}
              name={item.name}
              img={item.img}
              isFavorite={favoriteIds.includes(item._id)}
              onFavoriteToggle={onToggle}
            />
          ))}
        </div>
      </div>
    );
  };

  // Render fallback image when no cards are available
  const renderFallbackImage = () => (
    <div className="flex justify-center items-center py-12">
      <img
        src={img1}
        alt="No favorites available"
        className="w-full max-w-md h-auto rounded-lg"
      />
    </div>
  );

  // Check if both sections are empty and not loading
  const isEmpty =
    !loadingInternal &&
    !loadingHome &&
    internalItems.length === 0 &&
    homeItems.length === 0;

  return (
    <div className="favorites-containe min-h-[70vh]">
      {isEmpty ? (
        renderFallbackImage()
      ) : (
        <>
        <StaticFavourite />
          {renderFavoriteSection(
            "FAVOURITE INTERNAL LINKS",
            internalItems,
            loadingInternal,
            handleToggleInternalFavorite,
            "internal"
          )}
          {renderFavoriteSection(
            "Home Favorites",
            homeItems,
            loadingHome,
            handleToggleHomeFavorite,
            "home"
          )}
        </>
      )}
    </div>
  );
};

export default Favourite;
